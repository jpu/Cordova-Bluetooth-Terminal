MPEG1.prototype.write = function(pts, buffers) {
        JSMpeg.Decoder.Base.prototype.write.call(this, pts, buffers);
            var totalLength = buffers.map(a => a.length).reduce((a,b) => a+b);
            var dst = new Uint8Array(totalLength);
            var lengthSoFar = 0;
            for (var i = 0; i<buffers.length; i++){
                try{
                    dst.set(buffers[i], lengthSoFar);
                    lengthSoFar += buffers[i].length;
                } catch (ex){
                    console.error(ex);
                }

            }
                        
            if (this.prevMarker > dst.byteLength){
                this.prevMarker = 0;
            }
            var nalStart = -1;
            var n = 0;
            //console.log("TS PACKET, size: " + totalLength);
            for (var i = 0; i < dst.byteLength-6; i++) {
                // Look for NAL markers (00 00 00 01)
                if (dst[i] == 0
                    && dst[i+1] == 0
                    && dst[i+2] == 0
                    && dst[i+3] == 1
                ){
                    n = dst[i+4];
                    if (!(n == 6 || n == 33 ||  n == 9 || n == 37 || n == 39 || n == 40)){
                        // no supported marker here
                    } else {
                        if (nalStart > 0){
                            // at end
                            var nalPacket = new ArrayBuffer(i-1 - nalStart);
                            //console.log("  NAL END  : " + n + " " + m + " , size: " + nalPacket.byteLength);
                            new Uint8Array(nalPacket).set(new Uint8Array(dst.slice(nalStart, i-1))); 
                            // if (6 ){//|| n == 37 || n == 9 || n == 6){
                            //console.log("  NAL found (.): type: "+ n.toString() 
                            //    + ", from: "+ nalStart + ", to: "+(i-1) + ", len: " + nalPacket.byteLength) 
                            //   console.log("  NAL packet: " + nalPacket.length);
                            if (n != 33){
                                window._wfs.trigger('wfsH264DataParsing', {data: new Uint8Array(nalPacket) });
                            }
                            //}
                            nalStart = i;
                        } else {
                            //console.log("  NAL START: " + n + " " + m);
                            nalStart = i;
                        }
                    }
                }
                
            }
            if (nalStart > -1){
                var nalPacket = new ArrayBuffer(dst.byteLength - nalStart);
                new Uint8Array(nalPacket).set(new Uint8Array(dst.slice(nalStart, dst.byteLength))); 
                // console.log("  NAL found (e): type: " + dst[nalStart+4] 
                // + ", from: " + nalStart + ", to: "+ dst.byteLength +", len: " +  nalPacket.byteLength);
                if (dst[nalStart+4] != 33){
                    window._wfs.trigger('wfsH264DataParsing', {data: new Uint8Array(nalPacket) });
                }
                // console.log("TS packet end.");
            }
    };